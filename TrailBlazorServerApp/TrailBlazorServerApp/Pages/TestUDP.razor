@page "/test"
@inject UdpCommunicationService UdpService
@implements IDisposable
@using TrailBlazorServerApp.Data

<h3>Send Command to ESP32C3 Devices</h3>

<div>
    <button @onclick="SendAckMessage">Send ACK Message</button>
</div>

<div>
    <label>Select Command Type:</label>
    <select value="@selectedCommandType" @onchange="OnCommandTypeChange">
        <option value="Command">Command</option>
        <option value="LocationData">Location Data</option>
    </select>
</div>

<div>
    @if (selectedCommandType == "Command")
    {
        <div>
            <label>Direction (character):</label>
            <input @bind="directionInput" maxlength="1" />
        </div>
        <div>
            <label>Speed:</label>
            <input type="number" @bind="controlCommand.Speed" min="1" max="10" placeholder="10"/>
        </div>
        <div>
            <label>Stop:</label>
            <input type="checkbox" @bind="isStopChecked" />
        </div>
        <button @onclick="SendCommand">Send to ESP Devices</button>
    }
    else if (selectedCommandType == "LocationData")
    {
        <div>
            <label>X:</label>
            <input type="number" @bind="moveToCommand.x" />
        </div>
        <div>
            <label>Y:</label>
            <input type="number" @bind="moveToCommand.y" />
        </div>
        <button @onclick="SendLocationData">Send Location Data to ESP Devices</button>
    }
</div>

<p>@statusMessage</p>

<h4>Responses from ESP Devices</h4>
<ul>
    @foreach (var response in receivedMessages)
    {
        <li>@response</li>
    }
</ul>

@code {
    private ControlCommand controlCommand = new ControlCommand();
    private MoveToCommand moveToCommand = new MoveToCommand();
    private string statusMessage = "Ready";
    private List<string> receivedMessages = new(); // Store received messages

    // Temp variables for input handling
    private string directionInput = "";
    private bool isStopChecked;

    // Selected command type
    private string selectedCommandType = "Command";

    private async Task SendAckMessage()
    {
        statusMessage = "Sending ACK message...";
        try
        {
            // Call the method to send an ACK message directly
            await UdpService.SendDataToEspDevices(MessageType.ACK, Flags.NACK_FLAG);
            statusMessage = "ACK message sent successfully.";
        }
        catch (Exception ex)
        {
            statusMessage = $"Error sending ACK message: {ex.Message}";
        }
    }

    private async Task SendCommand()
    {
        // Convert the single character to byte (ASCII)
        if (!string.IsNullOrEmpty(directionInput) && directionInput.Length == 1)
        {
            controlCommand.Direction = (byte)directionInput[0];  // ASCII value of the character
        }
        else
        {
            statusMessage = "Please enter a valid direction (L, R, F, B).";
            return;
        }

        // Convert the checkbox value to 0 or 1
        controlCommand.Stop = (byte)(isStopChecked ? 1 : 0);

        await UdpService.SendDataToEspDevices(MessageType.ControlCommand, controlCommand, Flags.ACK_FLAG);
        statusMessage = $"Sent Command: Direction = {directionInput}, Speed = {controlCommand.Speed}, Stop = {(isStopChecked ? "True" : "False")}";
    }

    private async Task SendLocationData()
    {
        await UdpService.SendDataToEspDevices(MessageType.MoveToCommand, moveToCommand, Flags.ACK_FLAG);
        statusMessage = $"Sent Location Data: X = {moveToCommand.x}, Y = {moveToCommand.y}";
    }

    private void OnCommandTypeChange(ChangeEventArgs e)
    {
        selectedCommandType = e.Value.ToString();
        // Reset inputs when switching types
        if (selectedCommandType == "Command")
        {
            directionInput = "";
            controlCommand.Speed = 10;
            isStopChecked = false;
        }
        else if (selectedCommandType == "LocationData")
        {
            moveToCommand.x = 0;
            moveToCommand.y = 0;
        }
    }

    private void HandleMessageReceived(string message)
    {
        receivedMessages.Add(message);
        InvokeAsync(StateHasChanged); // Update the UI
    }

    // Unsubscribe from the event when the component is disposed
    public void Dispose()
    {
        UdpService.OnMessageReceived -= HandleMessageReceived;
    }
}





