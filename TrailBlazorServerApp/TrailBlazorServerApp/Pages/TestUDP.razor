@page "/test"
@inject UdpCommunicationService UdpService
@implements IDisposable

@using TrailBlazorServerApp.Data
<h3>Send Command to ESP32C3 Devices</h3>

<div>
    <label>Direction (L, R, F, B):</label>
    <input @bind="command.Direction" />
</div>
<div>
    <label>Stop (0 or 1):</label>
    <input type="number" @bind="command.Stop" />
</div>
<button @onclick="SendCommand">Send to ESP Devices</button>

<p>@statusMessage</p>

<h4>Responses from ESP Devices</h4>
<ul>
    @foreach (var response in receivedMessages)
    {
        <li>@response</li>
    }
</ul>

@code {
    private Command command = new Command();
    private string statusMessage = "";
    private List<string> receivedMessages = new(); // Store received messages

    private async Task SendCommand()
    {
        await UdpService.SendCommandToEspDevices(command);
        statusMessage = $"Sent: Direction = {command.Direction}, Stop = {command.Stop}";
    }

    private void HandleMessageReceived(string message)
    {
        receivedMessages.Add(message);
        InvokeAsync(StateHasChanged); // Update the UI
    }

    // Unsubscribe from the event when the component is disposed
    public void Dispose()
    {
        UdpService.OnMessageReceived -= HandleMessageReceived;
    }
}
