@page "/car/{carID:int}"
@inject AppProtocolService ProtocolService

@if (isConnecting)
{
    <div class="loading-screen">
        <h3>Attempting to connect to car...</h3>
    </div>
}
else
{
<div class="container text-center" tabindex="0" @ref="arrowContainer" @onkeydown="HandleKeyDown" @onkeyup="HandleKeyUp">
    <h3 class="text-primary">Car @carID</h3>
    <p>Use W, A, S, D or click and hold to control the arrows</p>

    <!-- Arrow keys displayed as divs with dynamic background colors -->
    <div class="d-flex justify-content-center">
        <div class="arrow"
             style="background-color:@upArrowColor;"
             @onmousedown="@(() => HandleDirectionDown("w"))"
             @onmouseup="@(() => HandleDirectionUp("w"))"
             @ontouchstart="@(() => HandleDirectionDown("w"))"
             @ontouchend="@(() => HandleDirectionUp("w"))">
            <img src="/images/arrow.png" class="arrow-img up-img" />
        </div>
    </div>
    <div class="d-flex justify-content-center">
        <div class="arrow"
             style="background-color:@leftArrowColor;"
             @onmousedown="@(() => HandleDirectionDown("a"))"
             @onmouseup="@(() => HandleDirectionUp("a"))"
             @ontouchstart="@(() => HandleDirectionDown("a"))"
             @ontouchend="@(() => HandleDirectionUp("a"))">
            <img src="/images/arrow.png" class="arrow-img left-img" />
        </div>
        <div class="arrow" />
        <div class="arrow"
             style="background-color:@rightArrowColor;"
             @onmousedown="@(() => HandleDirectionDown("d"))"
             @onmouseup="@(() => HandleDirectionUp("d"))"
             @ontouchstart="@(() => HandleDirectionDown("d"))"
             @ontouchend="@(() => HandleDirectionUp("d"))">
            <img src="/images/arrow.png" class="arrow-img right-img" />
        </div>
    </div>
    <div class="d-flex justify-content-center">
        <div class="arrow"
             style="background-color:@downArrowColor;"
             @onmousedown="@(() => HandleDirectionDown("s"))"
             @onmouseup="@(() => HandleDirectionUp("s"))"
             @ontouchstart="@(() => HandleDirectionDown("s"))"
             @ontouchend="@(() => HandleDirectionUp("s"))">
            <img src="/images/arrow.png" class="arrow-img down-img" />
        </div>
    </div>
</div>
@if (isMobile)
{
    <button class="gas-btn"
    @ontouchstart="OnGasPressed"
    @ontouchend="OnGasReleased"/>
}

@* <p>@statusMessage</p>
<h4>Responses from ESP Devices</h4>
<ul>
    @if (receivedMessages.Any())
    {
        foreach (var response in receivedMessages)
        {
            <li>@response</li>
        }
    }
    else
    {
        <li>No messages received yet.</li>
    }
</ul> *@
}

<style>
    .loading-screen {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.8);
        color: white;
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 24px;
        z-index: 1000;
    }


    /* Styling for arrows */
    .arrow {
        width: 15vh;
        height: 15vh;
        margin: 1vh;
        border-radius: 10px;
        background-color: black;
        cursor: pointer;
        position: relative; /* Ensure absolute positioning of the image works correctly */
    }

    .arrow-img {
        width: 60%; /* Adjust size as needed */
        height: 60%;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }

    /* Rotations for the image itself, not the arrow div */
    .up-img {
        transform: translate(-50%, -50%) rotate(90deg); /* Rotate 270deg for up */
    }

    .left-img {
        transform: translate(-50%, -50%) rotate(0deg); /* Rotate 180deg for left */
    }

    .down-img {
        transform: translate(-50%, -50%) rotate(270deg); /* Rotate 90deg for down */
    }

    .right-img {
        transform: translate(-50%, -50%) rotate(180deg);
    }

    .gas-btn {
        position: relative;
        background: linear-gradient(145deg, #333, #111); /* Black gradient */
        border: none;
        border-radius: 50px; /* Rounded corners */
        color: white;
        font-size: 24px;
        padding: 40px 60px;
        margin-top: 20px;
        margin-bottom: 20px;
        cursor: pointer;
        box-shadow: 0 5px #000, 0 10px 20px rgba(0, 0, 0, 0.3); /* 3D effect */
        transition: all 0.2s ease-in-out;
        font-family: 'Arial', sans-serif;
        overflow: hidden; /* Ensure image is clipped to the button's shape */
    }

        .gas-btn::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: url('/images/gas.png') no-repeat center;
            background-size: 60%; /* Adjust the size as needed */
            width: 100%;
            height: 100%;
            pointer-events: none; /* Image won't block button clicks */
        }

        .gas-btn:hover {
            box-shadow: 0 3px #000, 0 8px 15px rgba(0, 0, 0, 0.3); /* Smaller shadow on hover */
            transform: scale(1.05); /* Slightly enlarge */
        }

        .gas-btn:active {
            background: linear-gradient(145deg, #111, #333); /* Inverted gradient when pressed */
            transform: translateY(5px); /* Move button down to simulate pressing */
            box-shadow: 0 2px #000, 0 5px 10px rgba(0, 0, 0, 0.3); /* Reduced shadow */
        }

</style>
